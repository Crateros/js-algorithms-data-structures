    //Class

    class ClassCar {
      drive () {
        console.log("Class go fast!");
      }
    }

    const myCar = new ClassCar;
    myCar.drive();
    console.log(myCar.drive());



    //Constructor

    function ConstructorCar () {
      ConstructorCar.prototype.drive = function () {
        console.log("Constructor go fast!")
      }
    };

    const myOtherCar = new ConstructorCar;
    myOtherCar.drive();

    //Factory
    const proto = {
      drive () {
        console.log("Factory go fast!");
      }
    };

    function factoryCar () {
      return Object.create(proto);
    }

    const myLastCar = factoryCar();
    myLastCar.drive();



Each of these strategies stores methods on a shared prototype, and optionally
supports private data via constructor function closures. In other words, they
have mostly the same features, and could mostly be used interchangeably.

Benefits of Constructors & `class`
Most books teach you to use class or constructors.
`this` refers to the new object.
Some people like the way `myFoo = new Foo()` reads.
There may be a micro-optimization performance benefit, but you should not worry
about that unless you have profiled your code and proven that it’s an issue for
you.

Drawbacks of Constructors & `class`
1. Required `new`.
Prior to ES6, forgetting `new` was a very common bug.
To counter it, many people used boilerplate to enforce it:
    function Foo() {
      if (!(this instanceof Foo)) { return new Foo(); }
    }

Upgrading from a class to a factory should not break things,
but in JavaScript, it does.


Benefits of Using class
Convenient, self-contained syntax.
A single, canonical way to emulate classes in JavaScript. Prior to ES6, there
were several competing implementations in popular libraries.
More familiar to people from a class-based language background.

Drawbacks of Using class
All of the constructor drawbacks, plus:
Temptation for users to create problematic class hierarchies using the extends keyword.




Benefits of Using Factories
Factories are much more flexible than either constructor functions or classes,
and they don’t lead people down the wrong path by tempting them with the `extends`
keyword and deep inheritance hierarchies. You can inherit from factory functions
using a variety of techniques. In particular, check out the Stamp Specification
for composable factory functions.

1. Return any arbitrary object and use any arbitrary prototype
For example, you can easily create various types of objects which implement the
same API, e.g., a media player that can instantiate players for multiple types
of video content which use different APIs under the hood, or an event library
which can emit DOM events or web socket events.
Factories can also instantiate objects across execution contexts,
take advantage of object pools, and allow for more flexible prototypal
inheritance models.

2. No refactoring worries
You’d never have a need to convert from a factory to a constructor,
so refactoring will never be an issue.

3. No `new`
No ambiguity about using `new`. Don’t. (It will make `this` behave badly,
see next point).

4. Standard `this` behavior
`this` behaves as it normally would, so you can use it to access the parent
object. For example, inside `player.create()`, `this` refers to player, just
like any other method invocation would. `call()` and `apply()` also
reassign `this` as expected.

5. No deceptive `instanceof`

6. Some people like the way `myFoo = createFoo()` reads

Drawbacks of Factories
Doesn’t create a link from the instance to `Factory.prototype` — but this is
actually a good thing because you won’t get a deceptive `instanceof`.
Instead, `instanceof` will always fail. See benefits.
`this` doesn’t refer to the new object inside the factory. See benefits.
It may perform slower than a constructor function in micro-optimization
benchmarks. Be sure to test in the context of your app if this is a concern
for you.

Conclusion
In my opinion, `class` may have a convenient syntax, but that can’t make up for
the fact that it lures unwary users to crash on the rocks of class inheritance.
It’s also risky because in the future, you may want to upgrade to a factory,
but all your callers will be tightly coupled to the constructor function
because of the `new` keyword and the fact that moving from classes to
factories is a breaking change.
You may be thinking that you can just refactor the call sites, but on
large teams, or if the class you’re working with is part of a public
API, you could break code that isn’t in your control. In other words,
you can’t always assume that refactoring callers is even an option.
The cool thing about factories is that they’re not just more powerful
and more flexible, they’re also the easiest way to encourage entire teams,
and entire API user bases to use patterns that are simple, flexible, and safe.
